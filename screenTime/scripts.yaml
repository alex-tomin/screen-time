time:
  - platform: sntp
    id: time_comp
    on_time_sync:
      then:
        - script.execute: time_update
        - lambda: |-
             if (!id(initialized)) {
              id(initialize).execute();
              id(initialized) = true;
             }
    on_time:
      - seconds: 0
        minutes: 0
        hours: 7
        then:
          - lambda: |-
             if (id(enable_updates_check)) {
              id(check_for_updates).execute();
             }

ota:
  - platform: esphome
  - platform: http_request
    on_error:
      then:
        - logger.log:
            format: "OTA update error %d"
            args: ["x"]

http_request:
  verify_ssl: false

preferences:
 flash_write_interval: 5min

globals:
  - { id: initialized,           type: bool,         restore_value: no,  initial_value: 'false'}
  - { id: firmware_version,      type: std::string,  restore_value: no,  initial_value: '"0.0.0"'}

# settings
  - { id: pin_code,              type: std::string,  restore_value: yes, initial_value: '"1111"' }
  - { id: daily_minutes_limit,   type: int,          restore_value: yes, initial_value: '120'  }
  - { id: weekly_minutes_limit,  type: int,          restore_value: yes, initial_value: '900'   }
  - { id: watching_remind_every, type: int,          restore_value: yes, initial_value: '15'   }
  - { id: remaining_remind_1,    type: int,          restore_value: yes, initial_value: '30'   }
  - { id: remaining_remind_2,    type: int,          restore_value: yes, initial_value: '30'   }
  - { id: enable_updates_check,  type: bool,         restore_value: no,  initial_value: 'true'}
  - { id: enable_autoupdates,    type: bool,         restore_value: no,  initial_value: 'false'}

  - { id: description_line,      type: std::string,  restore_value: yes, initial_value: '"Demi''s Screen Tracker"'}

# Time Spent
  - { id: daily_minutes_spent,   type: int,          restore_value: yes, initial_value: '0' }
  - { id: weekly_minutes_spent,  type: int,          restore_value: yes, initial_value: '0' }
  - { id: current_day,           type: int,          restore_value: yes, initial_value: '0' }
  - { id: current_week,          type: int,          restore_value: yes, initial_value: '0' }
# Not saving deliberately - will have to start explisitly after reboot.
  - { id: start_time,            type: long int,     restore_value: no, initial_value: '0' }
  - { id: last_update_time,      type: long int,     restore_value: no, initial_value: '0' }
  - { id: is_watching,           type: bool,         restore_value: no,  initial_value: 'false' }

# TODO: - Dim Light When darker
#  ○ Disable light when late and no active timer
#  -  Enable light when touching and late

# TODO env_var - Speaker - to say time's up or when 10 minutes left
#  Settings
# ○ List Wifi, Select one, Enter ssid, password
# ○ Allowed day and week time
# ○ Reminder voice - how often / enabled/disabled
# ○ Api password for home assistant.
# ○ Enable password screen,  set Password
# Late time - to dim / turn off screen

# TODO: Button to turn screen off.
# TODO: first run WIFI setup.
# TODO: reminder popup after 30 min of watching, when 30 min left for the day, when 15 min left for the day and when time is up.
   # remind every and wathing for - priority.
# TODO: cutom page for Updates - Show release notes, show progress bar. Show error?
# TODO: on settings page add an option to install Automatically. And buttom to check for version update and install when there's a new version.
# https://esphome.io/components/ota/http_request
# TODO: add On Begin / On progress / Of error for firmware updates https://esphome.io/components/ota/
#TODO: test if not connected to HA - will it reboot every 15 min.


interval:
  - interval: 1min  # update clock every minute
    then:
      if:
        condition:
          time.has_time:
        then:        
          - script.execute: time_update 
  - interval: 1min  # upate spent and remaining labels, cannot be less than a minute as we are counting in minutes.
    then:
      if:
        condition:
          lambda: 'return id(initialized);'
        then:
          - script.execute: reset_time_nextday
          - if:
              condition:
                lambda: 'return id(is_watching);'
              then:
                - script.execute: calculate_remaining_time
                - script.execute: update_progress_ui    
  - interval: 1s     # update playing time
    then:
      if:
        condition:
          lambda: 'return id(initialized) && id(is_watching);'
        then:
        - lvgl.label.update:
            id: playedFor_label
            text: 
              format: "%02ld:%02ld:%02ld"
              args:  # convert minutes to hours, minutes and seconds
                - (id(time_comp).now().timestamp - id(start_time)) / 60 / 60
                - (id(time_comp).now().timestamp - id(start_time)) / 60
                - (id(time_comp).now().timestamp - id(start_time)) % 60   

script:
  - id: time_update
    then:  
      - lvgl.label.update:
          id: datetime_label
          text:
            format: "%s %2d  %02d:%02d"
            args:
              - '(new const char *[12]{"JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC"})[id(time_comp).now().month-1]'
              - 'id(time_comp).now().day_of_month'
              - 'id(time_comp).now().hour'
              - 'id(time_comp).now().minute'

  - id: initialize
    then:      
      - lambda: |-  #Logging
          ESP_LOGD("screen_time", "Initializing Screen Time. Is Watching = %d, Daily spent=%d, weekly=%d, start time = %ld, now = %ld",
            id(is_watching), id(daily_minutes_spent), id(weekly_minutes_spent), id(start_time), id(time_comp).now().timestamp);

      - script.execute: reset_time_nextday
      - script.execute: update_progress_ui
      - lvgl.page.show: main_page

  - id: calculate_remaining_time
    then:
      - lambda: |-  
          auto now = id(time_comp).now().timestamp;
          int elapsed = now - id(last_update_time);
          id(daily_minutes_spent) += elapsed / 60;  // Convert to minutes
          id(weekly_minutes_spent) += elapsed / 60;  // Convert to minutes          
          
          ESP_LOGD("screen_time", "Updated Spent Time. Daily Spent: %d; Weekly Spent: %d, last update: %ld, now: %ld", 
              id(daily_minutes_spent) ,id(weekly_minutes_spent), id(last_update_time), now);

          id(last_update_time) = now;

  - id: reset_time_nextday # or week
    then:
      - lambda: |-  
          auto time = id(time_comp).now();
          int day = time.day_of_year;
          int week_number = (day - time.day_of_week + 10) / 7;

          if (day != id(current_day)) {
            ESP_LOGI("screen_time", "Resetting Day progress. Saved Day=%d, Current Day=%d", day, id(current_day));
            id(daily_minutes_spent) = 0;
            id(current_day) = day;

            // TODO: extract to a function and cofigure either penalty or forgive, based on config.
            id(is_watching) = false;
          }

          if (week_number != id(current_week)) {
            ESP_LOGI("screen_time", "Resetting weekly progress. Saved week=%d, Current week=%d", week_number, id(current_week));
            id(weekly_minutes_spent) = 0;
            id(current_week) = week_number;
          }
  - id: update_progress_ui
    then:
      - lvgl.label.update:
          id: daily_remaining_label
          text: !lambda |-
            int remainingMinutes = std::max(0, id(daily_minutes_limit) - id(daily_minutes_spent));
            return str_sprintf("%02d:%02d", remainingMinutes / 60, remainingMinutes % 60).c_str();
            
      - lvgl.label.update:
          id: weekRemainingLabel
          text: !lambda |-
            int remainingMinutes = std::max(0, id(weekly_minutes_limit) - id(weekly_minutes_spent));
            return str_sprintf("%02d:%02d", remainingMinutes / 60, remainingMinutes % 60).c_str();                

      - lvgl.slider.update:
          id: daily_remaining_bar          
          value: !lambda |-
            int remainingMinutes = std::max(0, id(daily_minutes_limit) - id(daily_minutes_spent));
            ESP_LOGD("screen_time", "Remaining Bar. %d; limit: %d, spent: %d", 
              remainingMinutes * 100 / id(daily_minutes_limit), id(daily_minutes_limit), id(daily_minutes_spent));

            return remainingMinutes * 100 / id(daily_minutes_limit);

      - lvgl.arc.update:
          id: weekly_remaining_arc
          value: !lambda |-
            return (id(weekly_minutes_limit) - id(weekly_minutes_spent)) * 100 / id(weekly_minutes_limit) ;

  - id: start_watching
    then:
      - light.turn_on:
          id: led
          effect: Random Effect      
      - lambda: |-  
          id(start_time) = id(time_comp).now().timestamp;
          id(last_update_time) = id(start_time);
          id(is_watching) = true;
          ESP_LOGI("screen_time", "Started Watching. Daily spent=%d, weekly=%d", id(daily_minutes_spent), id(weekly_minutes_spent));
  - id: stop_watching
    then:
      - light.turn_off:
          id: led
      - lambda: |-  
          id(is_watching) = false;
          ESP_LOGI("screen_time", "Stopped Watching. Daily spent=%d, weekly=%d", id(daily_minutes_spent), id(weekly_minutes_spent));
          
  - id: check_for_updates
    then:
      if:
        condition:
          lambda: 'return id(enable_updates_check);'
        then:
          - logger.log: "Checking for updates..."
          - http_request.get:
              url: http://iot.tomin.us/iot-firmware/screen-time/version.txt
              capture_response: true
              on_response:
                then: 
                  - lambda: |-  
                      ESP_LOGD("screen_time", "Latest firmware version: %s; current version: %s", body.c_str(), id(firmware_version).c_str());
                      auto firmwareVer = body;
                      if (id(firmware_version) == firmwareVer) { 
                        ESP_LOGD("screen_time", "No new updates.");
                        return; 
                      }

                      if (id(enable_autoupdates)) {
                        ESP_LOGD("screen_time", "Automatic updates enabled, installing latest version.");
                        id(download_firmware).execute();
                      } else {
                        lv_obj_clear_flag(firmware_update_msg, LV_OBJ_FLAG_HIDDEN);
                      }                      
                      
  - id: download_firmware
    then:
      - logger.log: "Downloading laest firmware..."
      - ota.http_request.flash:
          url: http://iot.tomin.us/iot-firmware/screen-time/firmware.ota.bin
          md5_url: http://iot.tomin.us/iot-firmware/screen-time/firmware.ota.md5
      - logger.log: "This message should be not displayed because the device reboots"

wifi:
  on_connect:
    - lvgl.widget.show: wifi_label
  on_disconnect:
    - lvgl.widget.hide: wifi_label