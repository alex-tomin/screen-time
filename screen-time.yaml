substitutions:
  device_name: screen-time
  friendly_name: Screen Time

esphome:
  name_add_mac_suffix: true
  project:
    name: tomin.screen-time
    version: "1.0.0-beta.4"

api:
  reboot_timeout: 0s  # disable reboots when HA not connected

# see https://esphome.io/components/packages.html
packages:
  common: !include common/base.yaml
  scripts: !include screenTime/scripts.yaml
  lvglGui: !include screenTime/lvglGui.yaml
#  boot_page: !include screenTime/page_boot.yaml           
  main_page: !include screenTime/page_main.yaml
  pass_page: !include screenTime/page_password.yaml
  settings_page: !include screenTime/page_settings.yaml           


# Enable logging
logger:
  level: DEBUG
  logs:
    xpt2046: INFO
    light: INFO


esp32:
  board: esp32dev
  framework:
    type: arduino

# ============================================================ 
# Home Assistant components
#

sensor:
  - id: daily_spent_time
    name: "Daily Spent Time"
    platform: template
    device_class: "DURATION"
    unit_of_measurement: "min"
    state_class: "total_increasing"  #monotonically increasing positive total which periodically restarts counting from 0
    lambda: |-
      return id(daily_minutes_spent);

  - id: weekly_spent_time
    name: "Weekly Spent Time"
    platform: template
    device_class: "DURATION"
    unit_of_measurement: "min"
    state_class: "total_increasing"  #monotonically increasing positive total which periodically restarts counting from 0
    lambda: |-
      return id(weekly_minutes_spent);

binary_sensor:
  - name: "Watching or Playing"
    id: watching_or_playing
    platform: template
    lambda: |-
      return id(is_watching);
      
  - platform: gpio
    id: factory_reset_pin
    pin:
      number: GPIO0
      mode: INPUT
      inverted: true
    on_multi_click:
    - timing:
        - ON for at least 5s
      then:
        - lvgl.widget.show: factory_reset_msg
    on_release:
      then:
        - light.toggle: backlight

light:
  - name: Display Backlight
    id: backlight
    platform: monochromatic
    output: backlight_pwm
    restore_mode: ALWAYS_ON

  - name: RGB
    platform: rgb
    id: led
    red: led_red
    green: led_green
    blue: led_blue
    restore_mode: ALWAYS_OFF
    effects:
      - random:
          name: Random Effect
          transition_length: 5s
          update_interval: 7s

# ============================================================ 
# Hardware setup
# ============================================================ 

#  SPI for the display. The ESP32-2432S028R uses separate SPI buses for display and touch
spi:
  - id: tft
    clk_pin: GPIO14
    mosi_pin: GPIO13
    miso_pin: GPIO12
  - id: touch
    clk_pin: GPIO25
    mosi_pin: GPIO32
    miso_pin: GPIO39

# Setup a pin to control the backlight
output:
  - { platform: ledc, pin: GPIO21, id: backlight_pwm }
  # Setup the pins that control the RGB LED
  - { platform: ledc, pin: GPIO4,  id: led_red,   inverted: true }
  - { platform: ledc, pin: GPIO16, id: led_green, inverted: true }
  - { platform: ledc, pin: GPIO17, id: led_blue,  inverted: true }

# Setup the ili9xxx platform
# Display is used as 240x320 by default so we rotate it to 90Â°
display:
  - id: my_display
    platform: ili9xxx
    model: ili9341
    spi_id: tft
    cs_pin: GPIO15
    dc_pin: GPIO2
    rotation: 90
    invert_colors: false
    auto_clear_enabled: false #should be configured with auto_clear_enabled: false and update_interval: never, and should not have any lambda set.
    update_interval: never

# Set up the xpt2046 touch platform
touchscreen:
  id: my_touch
  platform: xpt2046
  spi_id: touch
  cs_pin: GPIO33
  interrupt_pin: GPIO36
  update_interval: 50ms
  threshold: 400
  calibration:
    x_min: 3900
    x_max: 260
    y_min: 185
    y_max: 3742
  transform:
    swap_xy: false
  on_touch:
    then:
      if:
        condition:
          light.is_off: backlight
        then:
          - light.turn_on: backlight

    